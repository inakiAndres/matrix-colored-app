{"version":3,"sources":["components/Game.js","components/LeaderBoard.js","utils/storageManager.js","components/Gameover.js","components/CountDown.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","createUseStyles","cards","width","height","margin","display","gridGap","gapSize","gridTemplateColumns","level","card","backgroundColor","color","principalColorSatAndLum","cardDifferent","saturation","lightness","Game","onCardClicked","useState","setColor","setSaturation","setLightness","useEffect","maxVariant","diffVariant","Math","floor","random","randomColors","matrixSize","nDifferent","checkResult","tileIndex","classes","className","Array","map","_","onClick","space","marginLeft","marginRight","marginTop","LeaderBoard","scores","score","index","nick","getArray","arrayName","thisArray","fetchArrayObject","localStorage","getItem","JSON","parse","gameOver","fontSize","Gameover","onRestart","wantToSave","setWantToSave","onSubmit","e","arrayItem","existingArray","push","sort","a","b","length","splice","setItem","stringify","pushArrayItem","target","name","value","type","placeholder","maxLength","countDown","CountDown","time","onCountDownEnds","isPlaying","duration","colors","onComplete","remainingTime","App","setLevel","gameState","setGameState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7333c56.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nconst useStyles = createUseStyles({\r\n  cards: {\r\n    width: \"40vw\",\r\n    height: \"40vw\",\r\n    margin: \"0 auto\",\r\n    display: \"grid\",\r\n    gridGap: ({ gapSize }) => `${gapSize}rem`,\r\n    gridTemplateColumns: ({ level }) => `repeat(${level}, 1fr)`,\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      width: \"40vh\",\r\n      height: \"40vh\",\r\n      gridGap: ({ gapSize }) => `${gapSize / 2.5}rem`,\r\n    },\r\n  },\r\n  card: {\r\n    backgroundColor: ({ color, principalColorSatAndLum }) =>\r\n      `hsl(${color}, ${principalColorSatAndLum}%, ${principalColorSatAndLum}%)`,\r\n    color: \"white\",\r\n  },\r\n  cardDifferent: {\r\n    backgroundColor: ({ color, saturation, lightness }) =>\r\n      `hsl(${color}, ${saturation}%, ${lightness}%)`,\r\n    color: \"white\",\r\n  },\r\n});\r\n\r\nconst Game = ({ level, onCardClicked }) => {\r\n  //Color region\r\n  const principalColorSatAndLum = 50;\r\n  const [color, setColor] = useState();\r\n  const [saturation, setSaturation] = useState(30);\r\n  const [lightness, setLightness] = useState(30);\r\n  const randomColors = () => {\r\n    const maxVariant = 20 - level / 2;\r\n    const diffVariant = Math.floor(Math.random() * maxVariant);\r\n    setColor(Math.floor(Math.random() * 360));\r\n    setSaturation(principalColorSatAndLum - (maxVariant - diffVariant));\r\n    setLightness(principalColorSatAndLum - diffVariant);\r\n  };\r\n  useEffect(() => {\r\n    randomColors();\r\n  }, [level]);\r\n\r\n  //Size and gameplay region\r\n  const matrixSize = level * level;\r\n  const nDifferent = Math.floor(Math.random() * matrixSize);\r\n  const checkResult = (tileIndex) => () => {\r\n    tileIndex === nDifferent ? onCardClicked(\"won\") : onCardClicked(\"lost\");\r\n  };\r\n  const gapSize = 1 - 0.02 * level;\r\n  const classes = useStyles({\r\n    level,\r\n    color,\r\n    principalColorSatAndLum,\r\n    saturation,\r\n    lightness,\r\n    gapSize,\r\n  });\r\n\r\n  return (\r\n    <div className={classes.cards}>\r\n      {[...Array(matrixSize)].map((_, tileIndex) =>\r\n        tileIndex !== nDifferent ? (\r\n          <div\r\n            className={classes.card}\r\n            key={tileIndex}\r\n            onClick={checkResult(tileIndex)}\r\n          ></div>\r\n        ) : (\r\n          <div\r\n            className={classes.cardDifferent}\r\n            key={tileIndex}\r\n            onClick={checkResult(tileIndex)}\r\n          ></div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\nconst useStyles = createUseStyles({\r\n  space: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginTop: \"10px\",\r\n  },\r\n});\r\n\r\nconst LeaderBoard = ({ scores }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <div className={classes.space}>LEADERBOARD</div>\r\n      <table className={classes.space}>\r\n        <thead>\r\n          <tr>\r\n            <th>Nickname</th>\r\n            <th>Level</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {scores.map((score, index) => (\r\n            <tr key={index}>\r\n              <td>{score.nick}</td>\r\n              <td>{score.level}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\nexport default LeaderBoard;\r\n","export function getArray(arrayName) {\r\n  var thisArray = [];\r\n  var fetchArrayObject = localStorage.getItem(arrayName);\r\n  if (typeof fetchArrayObject !== \"undefined\") {\r\n    if (fetchArrayObject !== null) {\r\n      thisArray = JSON.parse(fetchArrayObject);\r\n    }\r\n  }\r\n  return thisArray;\r\n}\r\n\r\nexport function pushArrayItem(arrayName, arrayItem) {\r\n  var existingArray = getArray(arrayName);\r\n  existingArray.push(arrayItem);\r\n  existingArray = existingArray.sort((a, b) => {\r\n    return b.level - a.level;\r\n  });\r\n  if (existingArray.length > 10) {\r\n    existingArray = existingArray.splice(0, 10);\r\n  }\r\n  localStorage.setItem(arrayName, JSON.stringify(existingArray));\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\nimport { getArray, pushArrayItem } from \"../utils/storageManager\";\r\n\r\nconst useStyles = createUseStyles({\r\n  gameOver: {\r\n    fontSize: \"26px\",\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      fontSize: \"22px\",\r\n    },\r\n  },\r\n});\r\n\r\nconst Gameover = ({ level, onRestart }) => {\r\n  const classes = useStyles();\r\n  const [wantToSave, setWantToSave] = useState(false);\r\n  const scores = getArray(\"scores\");\r\n  const setScore = (e) => {\r\n    const nick = e.target.name.value;\r\n    pushArrayItem(\"scores\", { nick, level: level - 1 });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.gameOver}>\r\n      {wantToSave ? (\r\n        <form onSubmit={setScore}>\r\n          <label>\r\n            <input type=\"text\" name=\"name\" placeholder=\"_ _ _\" maxLength=\"3\" />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      ) : (\r\n        <div>\r\n          GameOver\r\n          <div>you have reached the level: {level - 1} </div>\r\n          <div>Do you want to save your score?</div>\r\n          <button onClick={() => setWantToSave(true)}>Yes</button>\r\n          <button onClick={onRestart}>No, restart the game</button>\r\n        </div>\r\n      )}\r\n      <LeaderBoard scores={scores} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameover;\r\n","import React from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { createUseStyles } from \"react-jss\";\r\nconst useStyles = createUseStyles({\r\n  countDown: { marginTop: \"20px\" },\r\n});\r\nconst CountDown = ({ time, onCountDownEnds }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.countDown}>\r\n      <CountdownCircleTimer\r\n        isPlaying\r\n        duration={time}\r\n        colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n        onComplete={onCountDownEnds}\r\n      >\r\n        {({ remainingTime }) => \"Next level in \" + remainingTime}\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountDown;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Game from \"./components/Game\";\r\nimport Gameover from \"./components/Gameover\";\r\nimport CountDown from \"./components/CountDown\";\r\n\r\nfunction App() {\r\n  const [level, setLevel] = useState(2);\r\n  const [gameState, setGameState] = useState(\"playing\");\r\n\r\n  const nextLevel = () => {\r\n    setLevel(level + 1);\r\n    setGameState(\"playing\");\r\n  };\r\n  const gameOver = () => {\r\n    setLevel(2);\r\n    setGameState(\"playing\");\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"title\">LEVEL {level - 1}</div>\r\n      <div className=\"Game\">\r\n        <div className=\"alignCenter\">\r\n          {gameState === \"won\" && (\r\n            <div>\r\n              That's correct!!\r\n              <br />\r\n              <CountDown time={1} onCountDownEnds={nextLevel} />\r\n            </div>\r\n          )}\r\n          {gameState === \"playing\" && (\r\n            <Game level={level} onCardClicked={setGameState} />\r\n          )}\r\n        </div>\r\n        {gameState === \"lost\" && (\r\n          <Gameover level={level} onRestart={gameOver} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}