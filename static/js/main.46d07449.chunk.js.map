{"version":3,"sources":["components/LeaderBoard-styles.js","utils/storageManager.js","components/LeaderBoard.js","components/Menu.js","components/Game.js","components/Gameover.js","components/CountDown.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","createUseStyles","space","marginLeft","marginRight","marginTop","column","minWidth","padding","paddingLeft","paddingRight","paddingTop","paddingBottom","input","border","backgroundColor","width","textAlign","buttons","margin","fontFamily","boxShadow","firstClassified","display","justifyContent","marginBottom","secondClassified","thirdClassified","defaultClassified","getArray","arrayName","thisArray","fetchArrayObject","localStorage","getItem","JSON","parse","LeaderBoard","level","onRestart","showQuestion","classes","useState","wantToSave","setWantToSave","scores","onSubmit","e","arrayItem","existingArray","push","sort","a","b","length","splice","setItem","stringify","pushArrayItem","nick","target","name","value","className","type","placeholder","maxLength","style","onClick","borderColor","map","score","index","0","1","2","defaultProps","container","flexDirection","height","alignItems","content","fontSize","Menu","onPlay","cards","gridGap","gapSize","gridTemplateColumns","card","color","principalColorSatAndLum","cardDifferent","saturation","lightness","Game","onBgColor","onCardClicked","setColor","setSaturation","setLightness","useEffect","newColor","Math","floor","random","maxVariant","diffVariant","randomColors","matrixSize","nDifferent","checkResult","tileIndex","Array","_","gameOver","Gameover","title","isLastLevel","countDown","CountDown","time","onCountDownEnds","isPlaying","duration","colors","onComplete","App","setLevel","bgcolor","setBgColor","gameState","setGameState","playing","levelUp","lost","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA4DeA,EA1DGC,YAAgB,CAChCC,MAAO,CACLC,WAAY,OACZC,YAAa,OACbC,UAAW,QAEbC,OAAQ,CACNC,SAAU,OACVC,QAAS,GACT,0CAA2C,CACzCC,YAAa,EACbC,aAAc,EACdC,WAAY,IACZC,cAAe,MAGnBC,MAAO,CACLC,OAAQ,iBACRC,gBAAiB,cACjBC,MAAO,OACPC,UAAW,UAEbC,QAAS,CACPC,OAAQ,OACRL,OAAQ,YACRC,gBAAiB,cACjBE,UAAW,SACXG,WAAY,OACZC,UAAW,4DAEbC,gBAAiB,CACfC,QAAS,OACTC,eAAgB,eAChBC,aAAc,OACdV,gBAAiB,YACjBM,UAAW,+DAEbK,iBAAkB,CAChBH,QAAS,OACTC,eAAgB,eAChBC,aAAc,OACdV,gBAAiB,SACjBM,UAAW,+DAEbM,gBAAiB,CACfJ,QAAS,OACTC,eAAgB,eAChBC,aAAc,OACdV,gBAAiB,UACjBM,UAAW,+DAEbO,kBAAmB,CACjBL,QAAS,OACTC,eAAgB,eAChBC,aAAc,UCxDX,SAASI,EAASC,GACvB,IAAIC,EAAY,GACZC,EAAmBC,aAAaC,QAAQJ,GAM5C,MALgC,qBAArBE,GACgB,OAArBA,IACFD,EAAYI,KAAKC,MAAMJ,IAGpBD,ECHT,IAAMM,EAAc,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACjCC,EAAUzC,IAD0C,EAEtB0C,oBAAS,GAFa,mBAEnDC,EAFmD,KAEvCC,EAFuC,KAGpDC,EAAShB,EAAS,UAMxB,OACE,qCACGW,IACEG,EACC,qCACE,6DACA,uBAAMG,SAXC,SAACC,IDEb,SAAuBjB,EAAWkB,GACvC,IAAIC,EAAgBpB,EAASC,GAC7BmB,EAAcC,KAAKF,IACnBC,EAAgBA,EAAcE,MAAK,SAACC,EAAGC,GACrC,OAAOA,EAAEf,MAAQc,EAAEd,UAEHgB,OAAS,KACzBL,EAAgBA,EAAcM,OAAO,EAAG,KAE1CtB,aAAauB,QAAQ1B,EAAWK,KAAKsB,UAAUR,ICT7CS,CAAc,SAAU,CAAEC,KADbZ,EAAEa,OAAOC,KAAKC,MACKxB,MAAOA,EAAQ,KASvC,UACE,gCACE,uBACEyB,UAAWtB,EAAQ5B,MACnBmD,KAAK,OACLH,KAAK,OACLI,YAAY,QACZC,UAAU,QAGd,uBAAOH,UAAWtB,EAAQvB,QAAS8C,KAAK,SAASF,MAAM,iBAI3D,gCACE,qBAAKC,UAAWtB,EAAQvC,MAAxB,6CACA,wBACE6D,UAAWtB,EAAQvB,QACnBiD,MAAO,CAAEpD,gBAAiB,sBAC1BqD,QAAS,kBAAMxB,GAAc,IAH/B,iBAOA,wBACEmB,UAAWtB,EAAQvB,QACnBiD,MAAO,CAAEE,YAAa,OACtBD,QAAS7B,EAHX,sCASN,qBAAKwB,UAAWtB,EAAQvC,MAAxB,yBACA,sBAAK6D,UAAWtB,EAAQb,kBAAxB,UACE,qBAAKmC,UAAWtB,EAAQnC,OAAxB,sBACA,qBAAKyD,UAAWtB,EAAQnC,OAAxB,sBAEDuC,EAAOyB,KACN,SAACC,EAAOC,GAAR,MACG,CACCC,EACE,sBAAKV,UAAWtB,EAAQnB,gBAAxB,UACE,qBAAKyC,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMZ,OACvC,qBAAKI,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMjC,UAFKkC,GAKhDE,EACE,sBAAKX,UAAWtB,EAAQf,iBAAxB,UACE,qBAAKqC,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMZ,OACvC,qBAAKI,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMjC,UAFMkC,GAKjDG,EACE,sBAAKZ,UAAWtB,EAAQd,gBAAxB,UACE,qBAAKoC,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMZ,OACvC,qBAAKI,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMjC,UAFKkC,IAKhDA,IACA,sBAAKT,UAAWtB,EAAQb,kBAAxB,UACE,qBAAKmC,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMZ,OACvC,qBAAKI,UAAWtB,EAAQnC,OAAxB,SAAiCiE,EAAMjC,UAFOkC,UAgB5DnC,EAAYuC,aAAe,CAAEtC,MAAO,GAErBD,QC5FTrC,EAAYC,YAAgB,CAChC4E,UAAW,CACTtD,QAAS,OACTf,QAAS,GACT,0CAA2C,CACzCsE,cAAe,SACfC,OAAQ,QACRhE,gBAAgB,uBAGpBT,OAAQ,CACNiB,QAAS,OACTC,eAAgB,SAChBwD,WAAY,SACZhE,MAAO,MACP,0CAA2C,CACzCA,MAAO,SAGXiE,QAAS,CACPjE,MAAO,MACPG,OAAQ,OACRF,UAAW,SACXiE,SAAU,OACV,0CAA2C,CACzClE,MAAO,OACPkE,SAAU,SAGdhE,QAAS,CACPV,QAAS,GACTW,OAAQ,OACRL,OAAQ,YACRC,gBAAiB,QACjBE,UAAW,SACXG,WAAY,OACZC,UAAW,2DACX6D,SAAU,UAwCCC,EArCF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACR3C,EAAUzC,IAChB,OACE,sBAAK+D,UAAWtB,EAAQoC,UAAxB,UACE,qBAAKd,UAAWtB,EAAQnC,OAAxB,SACE,sBAAKyD,UAAWtB,EAAQwC,QAAxB,UACE,oDADF,8LAKE,uBALF,2IASE,uBATF,aAWE,uBACA,wBACElB,UAAWtB,EAAQvB,QACnBiD,MAAO,CAAEE,YAAa,SACtBD,QAASgB,EAHX,uBASJ,qBAAKrB,UAAWtB,EAAQnC,OAAxB,SACE,qBAAKyD,UAAWtB,EAAQwC,QAAxB,SACE,cAAC,EAAD,CAAazC,cAAc,Y,OCrE/BxC,EAAYC,YAAgB,CAChCoF,MAAO,CACLrE,MAAO,OACP+D,OAAQ,OACR5D,OAAQ,SACRI,QAAS,OACT+D,QAAS,gBAAGC,EAAH,EAAGA,QAAH,gBAAoBA,EAApB,QACTC,oBAAqB,gBAAGlD,EAAH,EAAGA,MAAH,uBAAyBA,EAAzB,WACrB,0CAA2C,CACzCtB,MAAO,OACP+D,OAAQ,OACRO,QAAS,gBAAGC,EAAH,EAAGA,QAAH,gBAAoBA,EAAU,IAA9B,UAGbE,KAAM,CACJ1E,gBAAiB,gBAAG2E,EAAH,EAAGA,MAAOC,EAAV,EAAUA,wBAAV,oBACRD,EADQ,aACEC,EADF,cAC+BA,EAD/B,OAEjBD,MAAO,SAETE,cAAe,CACb7E,gBAAiB,gBAAG2E,EAAH,EAAGA,MAAOG,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,UAAtB,oBACRJ,EADQ,aACEG,EADF,cACkBC,EADlB,OAEjBJ,MAAO,WAILK,EAAO,SAAC,GAAyC,IAAvCzD,EAAsC,EAAtCA,MAAO0D,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAAoB,EAG1BvD,qBAH0B,mBAG7CgD,EAH6C,KAGtCQ,EAHsC,OAIhBxD,mBAAS,IAJO,mBAI7CmD,EAJ6C,KAIjCM,EAJiC,OAKlBzD,mBAAS,IALS,mBAK7CoD,EAL6C,KAKlCM,EALkC,KAOpDC,qBAAU,YACa,WACnB,IAAMC,EAAWC,KAAKC,MAAsB,IAAhBD,KAAKE,UACjCP,EAASI,GACkBN,EAAvBM,EAAW,KAAO,IAAeA,EAAW,IACjCA,EAAW,KAC1B,IAAMI,EAAa,GAAKpE,EAAQ,EAC1BqE,EAAcJ,KAAKC,MAAMD,KAAKE,SAAWC,GAC/CP,EAb4B,IAaaO,EAAaC,IACtDP,EAd4B,GAcWO,GAEzCC,KACC,CAACtE,IAGJ,IAAMuE,EAAavE,EAAQA,EACrBwE,EAAaP,KAAKC,MAAMD,KAAKE,SAAWI,GAExCE,EAAc,SAACC,GAAD,OAAe,WACNf,EAA3Be,IAAcF,EAA2B,UAA2B,UAGhErE,EAAUzC,EAAU,CACxBsC,QACAoD,QACAC,wBA9B8B,GA+B9BE,aACAC,YACAP,QAPc,EAAI,IAAOjD,IAU3B,OACE,qBAAKyB,UAAWtB,EAAQ4C,MAAxB,SACG,YAAI4B,MAAMJ,IAAavC,KAAI,SAAC4C,EAAGF,GAAJ,OAC1BA,IAAcF,EACZ,qBACE/C,UAAWtB,EAAQgD,KAEnBrB,QAAS2C,EAAYC,IADhBA,GAIP,qBACEjD,UAAWtB,EAAQmD,cAEnBxB,QAAS2C,EAAYC,IADhBA,SAejBjB,EAAKnB,aAAe,CAClBtC,MAAO,GAGMyD,QC/FT/F,EAAYC,YAAgB,CAChCkH,SAAU,CACRjC,SAAU,OACV,0CAA2C,CACzCA,SAAU,WA0BDkC,EArBE,SAAC,GAAmC,IAAjC9E,EAAgC,EAAhCA,MAAO+E,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC1B7E,EAAUzC,IAEhB,OACE,sBAAK+D,UAAWtB,EAAQ0E,SAAxB,UACGE,EACAC,EACC,sEAEA,+DAAkChF,EAAQ,EAA1C,W,QClBFtC,EAAYC,YAAgB,CAChCsH,UAAW,CAAElH,UAAW,UAEpBmH,EAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBACnBjF,EAAUzC,IAChB,OACE,qBAAK+D,UAAWtB,EAAQ8E,UAAxB,SACE,cAAC,uBAAD,CACEI,WAAS,EACTC,SAAUH,EACVI,OAAQ,CAAC,CAAC,UAAW,KAAO,CAAC,UAAW,KAAO,CAAC,YAChDC,WAAYJ,EAJd,SAMG,iBAAM,yBAWfF,EAAU5C,aAAe,CACvB6C,KAAM,GAGOD,QCkDAO,MA1Ef,WAAgB,IAAD,EACarF,mBAAS,GADtB,mBACNJ,EADM,KACC0F,EADD,OAEiBtF,mBAAS,KAF1B,mBAENuF,EAFM,KAEGC,EAFH,OAIqBxF,mBAAS,IAJ9B,mBAINyF,EAJM,KAIKC,EAJL,KAaPjB,EAAW,WACfa,EAAS,GACTI,EAAa,KAGf,OACE,sBACErE,UAAU,MACVI,MAAO,CAAEpD,gBAAgB,OAAD,OAASkH,EAAT,gBAF1B,UAIGE,GAAa,sBAAKpE,UAAU,QAAf,mBAA8BzB,EAAQ,KACpD,qBAAKyB,UAAU,OAAf,SACG,CACCsE,QACE,qBAAKtE,UAAU,cAAf,SACE,cAAC,EAAD,CACEzB,MAAOA,EACP0D,UAAWkC,EACXjC,cAAemC,MAIrBE,QACEhG,GAAS,GACP,qBAAKyB,UAAU,cAAf,SACE,cAAC,EAAD,CAAW0D,KAAM,EAAGC,gBA7BhB,WAChBM,EAAS1F,EAAQ,GACjB8F,EAAa,gBA8BH,qBAAKrE,UAAU,cAAf,SACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEzB,MAAOA,EACP+E,MAAM,oBACNC,aAAa,IAEf,cAAC,EAAD,CACEhF,MAAOA,EACPC,UAAW4E,EACX3E,cAAc,SAKxB+F,KACE,qBAAKxE,UAAU,cAAf,SACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CAAUzB,MAAOA,EAAO+E,MAAM,YAAYC,aAAa,IACvD,cAAC,EAAD,CACEhF,MAAOA,EACPC,UAAW4E,EACX3E,cAAc,UAKtB2F,IAAc,cAAC,EAAD,CAAM/C,OA9DV,WAChBgD,EAAa,oBCHFI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46d07449.chunk.js","sourcesContent":["import { createUseStyles } from \"react-jss\";\r\n\r\nconst useStyles = createUseStyles({\r\n  space: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginTop: \"10px\",\r\n  },\r\n  column: {\r\n    minWidth: \"25px\",\r\n    padding: 10,\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      paddingLeft: 5,\r\n      paddingRight: 5,\r\n      paddingTop: 2.5,\r\n      paddingBottom: 2.5,\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #555\",\r\n    backgroundColor: \"transparent\",\r\n    width: \"50px\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttons: {\r\n    margin: \"10px\",\r\n    border: \"1px solid\",\r\n    backgroundColor: \"transparent\",\r\n    textAlign: \"center\",\r\n    fontFamily: \"Itim\",\r\n    boxShadow: \"0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0)\",\r\n  },\r\n  firstClassified: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    marginBottom: \"10px\",\r\n    backgroundColor: \"goldenrod\",\r\n    boxShadow: \"0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.16)\",\r\n  },\r\n  secondClassified: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    marginBottom: \"10px\",\r\n    backgroundColor: \"silver\",\r\n    boxShadow: \"0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.16)\",\r\n  },\r\n  thirdClassified: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    marginBottom: \"10px\",\r\n    backgroundColor: \"#cd7f32\",\r\n    boxShadow: \"0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.16)\",\r\n  },\r\n  defaultClassified: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    marginBottom: \"10px\",\r\n  },\r\n});\r\n\r\nexport default useStyles;\r\n","export function getArray(arrayName) {\r\n  var thisArray = [];\r\n  var fetchArrayObject = localStorage.getItem(arrayName);\r\n  if (typeof fetchArrayObject !== \"undefined\") {\r\n    if (fetchArrayObject !== null) {\r\n      thisArray = JSON.parse(fetchArrayObject);\r\n    }\r\n  }\r\n  return thisArray;\r\n}\r\n\r\nexport function pushArrayItem(arrayName, arrayItem) {\r\n  var existingArray = getArray(arrayName);\r\n  existingArray.push(arrayItem);\r\n  existingArray = existingArray.sort((a, b) => {\r\n    return b.level - a.level;\r\n  });\r\n  if (existingArray.length > 10) {\r\n    existingArray = existingArray.splice(0, 10);\r\n  }\r\n  localStorage.setItem(arrayName, JSON.stringify(existingArray));\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport useStyles from \"./LeaderBoard-styles\";\r\nimport { getArray, pushArrayItem } from \"../utils/storageManager\";\r\n\r\nconst LeaderBoard = ({ level, onRestart, showQuestion }) => {\r\n  const classes = useStyles();\r\n  const [wantToSave, setWantToSave] = useState(false);\r\n  const scores = getArray(\"scores\");\r\n  const setScore = (e) => {\r\n    const nick = e.target.name.value;\r\n    pushArrayItem(\"scores\", { nick, level: level - 1 });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showQuestion &&\r\n        (wantToSave ? (\r\n          <>\r\n            <div>Insert your initials here:</div>\r\n            <form onSubmit={setScore}>\r\n              <label>\r\n                <input\r\n                  className={classes.input}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"_ _ _\"\r\n                  maxLength=\"3\"\r\n                />\r\n              </label>\r\n              <input className={classes.buttons} type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <div>\r\n            <div className={classes.space}>Do you want to save your score?</div>\r\n            <button\r\n              className={classes.buttons}\r\n              style={{ backgroundColor: \"hsl(120, 70%, 70%)\" }}\r\n              onClick={() => setWantToSave(true)}\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className={classes.buttons}\r\n              style={{ borderColor: \"red\" }}\r\n              onClick={onRestart}\r\n            >\r\n              No, restart the game\r\n            </button>\r\n          </div>\r\n        ))}\r\n      <div className={classes.space}>LEADERBOARD</div>\r\n      <div className={classes.defaultClassified}>\r\n        <div className={classes.column}>Nickname</div>\r\n        <div className={classes.column}>Level</div>\r\n      </div>\r\n      {scores.map(\r\n        (score, index) =>\r\n          ({\r\n            0: (\r\n              <div className={classes.firstClassified} key={index}>\r\n                <div className={classes.column}>{score.nick}</div>\r\n                <div className={classes.column}>{score.level}</div>\r\n              </div>\r\n            ),\r\n            1: (\r\n              <div className={classes.secondClassified} key={index}>\r\n                <div className={classes.column}>{score.nick}</div>\r\n                <div className={classes.column}>{score.level}</div>\r\n              </div>\r\n            ),\r\n            2: (\r\n              <div className={classes.thirdClassified} key={index}>\r\n                <div className={classes.column}>{score.nick}</div>\r\n                <div className={classes.column}>{score.level}</div>\r\n              </div>\r\n            ),\r\n          }[index] || (\r\n            <div className={classes.defaultClassified} key={index}>\r\n              <div className={classes.column}>{score.nick}</div>\r\n              <div className={classes.column}>{score.level}</div>\r\n            </div>\r\n          ))\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nLeaderBoard.propTypes = {\r\n  level: PropTypes.number,\r\n  onRestart: PropTypes.func,\r\n  showQuestion: PropTypes.bool.isRequired,\r\n};\r\n\r\nLeaderBoard.defaultProps = { level: 2 };\r\n\r\nexport default LeaderBoard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createUseStyles } from \"react-jss\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\n\r\nconst useStyles = createUseStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    padding: 20,\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      flexDirection: \"column\",\r\n      height: \"150vh\",\r\n      backgroundColor: `hsl(110, 50%, 60%)`,\r\n    },\r\n  },\r\n  column: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"50%\",\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  content: {\r\n    width: \"50%\",\r\n    margin: \"auto\",\r\n    textAlign: \"center\",\r\n    fontSize: \"24px\",\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      width: \"100%\",\r\n      fontSize: \"18px\",\r\n    },\r\n  },\r\n  buttons: {\r\n    padding: 10,\r\n    margin: \"20px\",\r\n    border: \"1px solid\",\r\n    backgroundColor: \"white\",\r\n    textAlign: \"center\",\r\n    fontFamily: \"Itim\",\r\n    boxShadow: \"0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0)\",\r\n    fontSize: \"28px\",\r\n  },\r\n});\r\nconst Menu = ({ onPlay }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.column}>\r\n        <div className={classes.content}>\r\n          <h2>Matrix Colored App</h2>\r\n          The game consists in a matrix of squares and you have to tap the\r\n          square which have the different color. If you tap the correct you will\r\n          level up, and the matrix will be growing by levels.\r\n          <br />\r\n          The level 20 is the last level, I select this one because the\r\n          difference of the color, and the size of the matrix and squares is\r\n          enough.\r\n          <br />\r\n          GOOD LUCK!\r\n          <br />\r\n          <button\r\n            className={classes.buttons}\r\n            style={{ borderColor: \"green\" }}\r\n            onClick={onPlay}\r\n          >\r\n            PLAY\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={classes.column}>\r\n        <div className={classes.content}>\r\n          <LeaderBoard showQuestion={false}></LeaderBoard>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMenu.propTypes = { onPlay: PropTypes.func.isRequired };\r\n\r\nexport default Menu;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nconst useStyles = createUseStyles({\r\n  cards: {\r\n    width: \"40vw\",\r\n    height: \"40vw\",\r\n    margin: \"0 auto\",\r\n    display: \"grid\",\r\n    gridGap: ({ gapSize }) => `${gapSize}rem`,\r\n    gridTemplateColumns: ({ level }) => `repeat(${level}, 1fr)`,\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      width: \"40vh\",\r\n      height: \"40vh\",\r\n      gridGap: ({ gapSize }) => `${gapSize / 2.5}rem`,\r\n    },\r\n  },\r\n  card: {\r\n    backgroundColor: ({ color, principalColorSatAndLum }) =>\r\n      `hsl(${color}, ${principalColorSatAndLum}%, ${principalColorSatAndLum}%)`,\r\n    color: \"white\",\r\n  },\r\n  cardDifferent: {\r\n    backgroundColor: ({ color, saturation, lightness }) =>\r\n      `hsl(${color}, ${saturation}%, ${lightness}%)`,\r\n    color: \"white\",\r\n  },\r\n});\r\n\r\nconst Game = ({ level, onBgColor, onCardClicked }) => {\r\n  //Color region\r\n  const principalColorSatAndLum = 50;\r\n  const [color, setColor] = useState();\r\n  const [saturation, setSaturation] = useState(30);\r\n  const [lightness, setLightness] = useState(30);\r\n\r\n  useEffect(() => {\r\n    const randomColors = () => {\r\n      const newColor = Math.floor(Math.random() * 360);\r\n      setColor(newColor);\r\n      if (newColor + 180 <= 360) onBgColor(newColor + 180);\r\n      else onBgColor(newColor - 180);\r\n      const maxVariant = 20 - level / 2;\r\n      const diffVariant = Math.floor(Math.random() * maxVariant);\r\n      setSaturation(principalColorSatAndLum - (maxVariant - diffVariant));\r\n      setLightness(principalColorSatAndLum - diffVariant);\r\n    };\r\n    randomColors();\r\n  }, [level]);\r\n\r\n  //Size and gameplay region\r\n  const matrixSize = level * level;\r\n  const nDifferent = Math.floor(Math.random() * matrixSize);\r\n\r\n  const checkResult = (tileIndex) => () => {\r\n    tileIndex === nDifferent ? onCardClicked(\"levelUp\") : onCardClicked(\"lost\");\r\n  };\r\n  const gapSize = 1 - 0.02 * level;\r\n  const classes = useStyles({\r\n    level,\r\n    color,\r\n    principalColorSatAndLum,\r\n    saturation,\r\n    lightness,\r\n    gapSize,\r\n  });\r\n\r\n  return (\r\n    <div className={classes.cards}>\r\n      {[...Array(matrixSize)].map((_, tileIndex) =>\r\n        tileIndex !== nDifferent ? (\r\n          <div\r\n            className={classes.card}\r\n            key={tileIndex}\r\n            onClick={checkResult(tileIndex)}\r\n          ></div>\r\n        ) : (\r\n          <div\r\n            className={classes.cardDifferent}\r\n            key={tileIndex}\r\n            onClick={checkResult(tileIndex)}\r\n          ></div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nGame.propTypes = {\r\n  level: PropTypes.number.isRequired,\r\n  onBgColor: PropTypes.func.isRequired,\r\n  onCardClicked: PropTypes.func.isRequired,\r\n};\r\n\r\nGame.defaultProps = {\r\n  level: 2,\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nconst useStyles = createUseStyles({\r\n  gameOver: {\r\n    fontSize: \"26px\",\r\n    \"@media screen and (max-width: 575.98px)\": {\r\n      fontSize: \"22px\",\r\n    },\r\n  },\r\n});\r\n\r\nconst Gameover = ({ level, title, isLastLevel }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.gameOver}>\r\n      {title}\r\n      {isLastLevel ? (\r\n        <div>You have reached to the last level </div>\r\n      ) : (\r\n        <div>You have reached the level: {level - 1} </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nGameover.propTypes = {\r\n  level: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  isLastLevel: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Gameover;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { createUseStyles } from \"react-jss\";\r\nconst useStyles = createUseStyles({\r\n  countDown: { marginTop: \"20px\" },\r\n});\r\nconst CountDown = ({ time, onCountDownEnds }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.countDown}>\r\n      <CountdownCircleTimer\r\n        isPlaying\r\n        duration={time}\r\n        colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n        onComplete={onCountDownEnds}\r\n      >\r\n        {() => \"That's correct!!\"}\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountDown.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  onCountDownEnds: PropTypes.func.isRequired,\r\n};\r\n\r\nCountDown.defaultProps = {\r\n  time: 1,\r\n};\r\n\r\nexport default CountDown;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Menu from \"./components/Menu\";\r\nimport Game from \"./components/Game\";\r\nimport Gameover from \"./components/Gameover\";\r\nimport CountDown from \"./components/CountDown\";\r\nimport LeaderBoard from \"./components/LeaderBoard\";\r\n\r\nfunction App() {\r\n  const [level, setLevel] = useState(2);\r\n  const [bgcolor, setBgColor] = useState(140);\r\n\r\n  const [gameState, setGameState] = useState(\"\");\r\n\r\n  const startGame = () => {\r\n    setGameState(\"playing\");\r\n  };\r\n  const nextLevel = () => {\r\n    setLevel(level + 1);\r\n    setGameState(\"playing\");\r\n  };\r\n  const gameOver = () => {\r\n    setLevel(2);\r\n    setGameState(\"\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"App\"\r\n      style={{ backgroundColor: `hsl(${bgcolor}, 40%, 60%)` }}\r\n    >\r\n      {gameState && <div className=\"title\">LEVEL {level - 1}</div>}\r\n      <div className=\"Game\">\r\n        {{\r\n          playing: (\r\n            <div className=\"alignCenter\">\r\n              <Game\r\n                level={level}\r\n                onBgColor={setBgColor}\r\n                onCardClicked={setGameState}\r\n              />\r\n            </div>\r\n          ),\r\n          levelUp:\r\n            level <= 20 ? (\r\n              <div className=\"alignCenter\">\r\n                <CountDown time={1} onCountDownEnds={nextLevel} />\r\n              </div>\r\n            ) : (\r\n              <div className=\"alignCenter\">\r\n                <div className=\"gameEnd\">\r\n                  <Gameover\r\n                    level={level}\r\n                    title=\"YOU ARE THE BEST!\"\r\n                    isLastLevel={true}\r\n                  />\r\n                  <LeaderBoard\r\n                    level={level}\r\n                    onRestart={gameOver}\r\n                    showQuestion={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n            ),\r\n          lost: (\r\n            <div className=\"alignCenter\">\r\n              <div className=\"gameEnd\">\r\n                <Gameover level={level} title=\"GAME OVER\" isLastLevel={false} />\r\n                <LeaderBoard\r\n                  level={level}\r\n                  onRestart={gameOver}\r\n                  showQuestion={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }[gameState] || <Menu onPlay={startGame} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}